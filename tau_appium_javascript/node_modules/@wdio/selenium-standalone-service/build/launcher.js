import fs from 'node:fs';
import fsp from 'node:fs/promises';
import path from 'node:path';
import logger from '@wdio/logger';
import { isCloudCapability } from '@wdio/config';
import SeleniumStandalone from 'selenium-standalone';
import { getFilePath, hasCapsWithSupportedBrowser } from './utils.js';
const DEFAULT_LOG_FILENAME = 'wdio-selenium-standalone.log';
const log = logger('@wdio/selenium-standalone-service');
const DEFAULT_CONNECTION = {
    protocol: 'http',
    hostname: 'localhost',
    port: 4444,
    path: '/wd/hub'
};
export default class SeleniumStandaloneLauncher {
    _options;
    _capabilities;
    _config;
    args;
    installArgs;
    skipSeleniumInstall;
    watchMode = false;
    process;
    drivers;
    constructor(_options, _capabilities, _config) {
        this._options = _options;
        this._capabilities = _capabilities;
        this._config = _config;
        this.skipSeleniumInstall = Boolean(this._options.skipSeleniumInstall);
        this.args = this._options.args || {};
        // simplified mode
        if (this.isSimplifiedMode(this._options)) {
            this.args.drivers = {};
            Object.entries(this._options.drivers).forEach(([browserDriver, version]) => {
                if (typeof version === 'string') {
                    this.args.drivers[browserDriver] = { version };
                }
                else if (version === true) {
                    this.args.drivers[browserDriver] = {};
                }
            });
            this.installArgs = { ...this.args };
        }
        else {
            this.installArgs = this._options.installArgs || {};
        }
    }
    async onPrepare(config) {
        this.watchMode = Boolean(config.watch);
        if (!this.skipSeleniumInstall) {
            await SeleniumStandalone.install(this.installArgs).catch(this.handleSeleniumError);
        }
        /**
         * update capability connection options to connect
         * to standalone server
         */
        const isMultiremote = !Array.isArray(this._capabilities);
        const capabilities = isMultiremote
            ? Object.values(this._capabilities)
            : this._capabilities;
        for (const capability of capabilities) {
            const cap = capability.capabilities || capability;
            /**
             * handle standard mode vs multiremote mode, e.g.
             * ```js
             * capabilities: [{
             *   browserName: 'chrome',
             *   hostname: 'localhost'
             * }]
             * ```
             * vs.
             * ```js
             * capabilities: {
             *   myBrowser: {
             *     hostname: 'localhost',
             *     capabilities: { browserName: 'chrome' }
             *   }
             * }
             */
            const remoteCapabilities = cap.alwaysMatch || cap;
            const objectToApplyConnectionDetails = !isMultiremote
                ? remoteCapabilities
                : capability;
            if (!isCloudCapability(remoteCapabilities) && hasCapsWithSupportedBrowser(remoteCapabilities)) {
                Object.assign(objectToApplyConnectionDetails, DEFAULT_CONNECTION, { ...objectToApplyConnectionDetails });
            }
        }
        /**
         * start Selenium Standalone server
         */
        const start = SeleniumStandalone.start(this.args);
        start.catch(this.handleSeleniumError);
        this.process = await start;
        if (typeof this._config.outputDir === 'string') {
            await this._redirectLogStream();
        }
        if (this.watchMode) {
            process.on('SIGINT', this._stopProcess);
            process.on('exit', this._stopProcess);
            process.on('uncaughtException', this._stopProcess);
        }
    }
    onComplete() {
        // selenium should not be killed in watch mode
        if (!this.watchMode) {
            this._stopProcess();
        }
    }
    async _redirectLogStream() {
        const logFile = getFilePath(this._config.outputDir, DEFAULT_LOG_FILENAME);
        // ensure file & directory exists
        await fsp.mkdir(path.dirname(logFile), { recursive: true });
        const logStream = fs.createWriteStream(logFile, { flags: 'w' });
        this.process.stdout?.pipe(logStream);
        this.process.stderr?.pipe(logStream);
    }
    _stopProcess = () => {
        if (this.process) {
            log.info('shutting down all browsers');
            this.process.kill();
        }
    };
    isSimplifiedMode(options) {
        return options.drivers && Object.keys(options.drivers).length > 0;
    }
    handleSeleniumError(error) {
        log.error(error);
        process.exit(1);
    }
}
